Index: app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import express from \"express\";\nimport {getFruits, getFruitName, getFruitId, getFruitFamily, addFruit} from \"./database.js\";\n\n// Creates the express app\nconst app = express();\napp.use(express.json());\n\n// Fetch all fruits (GET /fruits/all)\napp.get(\"/fruits/all\", async (req, res) => {\n    try {\n        const fruits = await getFruits();\n        res.send(fruits);\n    } catch (error) {\n        console.error(\"Error fetching all fruits:\" , error.message);\n        res.status(500).send({ error: \"Internal server error\" });\n    }\n})\n\n// Fetch fruit by name\napp.get(\"/fruits/name/:name\", async (req, res) => {\n    const name = req.params.name;\n    try {\n        const fruit = await getFruitName(name);\n        if(!fruit) {\n            return res.status(400).send(\"Fruit not found!\");\n        }\n\n        res.send(fruit);\n    } catch (error) {\n        console.error(\"Error fetching fruit by name:\", error.message);\n        res.status(500).send({ error: \"Internal server error\" });\n    }\n})\n\n// Fetch fruit by ID\napp.get(\"/fruits/id/:id\", async (req, res) => {\n    const id = parseInt(req.params.id);\n    if(isNaN(id) || id <= 0) {\n        return res.status(404).send(\"Invalid ID: ID must be a number greater than 0\");\n    }\n    try {\n        const fruit = await getFruitId(id);\n\n        if(!fruit) {\n            return res.status(404).send(\"Fruit not found!\");\n        }\n\n        res.send(fruit);\n    } catch (error) {\n        console.error(\"Error fetching fruit by ID:\" ,error.message);\n        res.status(500).send({ error: \"Internal server error\" });\n    }\n})\n\n// Fetch fruit by family name\napp.get(\"/fruits/family/:family\", async (req, res) => {\n    const family = req.params.family;\n\n    try {\n        const fruit = await getFruitFamily(family);\n        if(!fruit) {\n            return res.status(404).send(`Fruit not found! There are not fruits in the database in the ${family} family.`);\n        }\n        res.send(fruit);\n    } catch (error) {\n        console.error(\"Error fetching fruit by family:\", error.message);\n        res.status(500).send({ error: \"Internal server error\"});\n    }\n})\n\n// Add fruit\napp.post(\"/fruits/add\", async (req, res) => {\n    const {name, family, order, genus, calories, fat, sugar, carbohydrates, protein} = req.body;\n\n    if (!name || !family || !order || !genus || calories == null || fat == null || sugar == null || carbohydrates == null || protein == null){\n        return res.status(400).send(\"Missing required fields in request body!\");\n    }\n\n    try {\n        const newFruit = await addFruit(name, family, order, genus, calories, fat, sugar, carbohydrates, protein);\n\n        res.status(201).send({\n            message: \"Fruit added successfully!\",\n            fruit: newFruit,\n        });\n    } catch(error) {\n        console.error(\"Error adding fruit:\", error.message);\n        res.status(500).send({error: \"Internal server error\"});\n    }\n});\n\n// Error handling\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send('Something broke!');\n})\n\n// Start the server\napp.listen(8080, () => {\n    console.log(`Server is running on port 8080`);\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.js b/app.js
--- a/app.js	(revision cf61fa19ae5af8ed0a368c8c0ddab3659b163574)
+++ b/app.js	(date 1738338535330)
@@ -1,4 +1,6 @@
 import express from "express";
+import dotenv from "dotenv";
+dotenv.config();
 import {getFruits, getFruitName, getFruitId, getFruitFamily, addFruit} from "./database.js";
 
 // Creates the express app
@@ -96,6 +98,6 @@
 })
 
 // Start the server
-app.listen(8080, () => {
+app.listen(process.env.PORT || 8080, () => {
     console.log(`Server is running on port 8080`);
 });
Index: database.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import mysql from \"mysql2\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\n// createPool is used to manage a pool of mysql connections, using the .env variables in my own .env file to create a connection on my local host without that information displayed in the source code.\nconst pool = mysql.createPool( {\n    host: process.env.MYSQL_HOST,\n    user: process.env.MYSQL_USER,\n    password: process.env.MYSQL_PASSWORD,\n    database: process.env.MYSQL_DATABASE\n}).promise();\n\n//Returns an array of fruit objects\nexport async function getFruits() {\n    const [res] = await pool.query(\"SELECT * FROM fruits\");\n    return res;\n}\n\n// Returns a single fruit via name\nexport async function getFruitName(name) {\n    const [res] = await pool.query(`\n    SELECT * \n    FROM fruits\n    WHERE name = ?\n    `, [name]);\n    return res[0];\n}\n// Returns a single fruit via id\nexport async function getFruitId(id) {\n    const [res] = await pool.query(`\n    SELECT *\n    FROM fruits\n    WHERE id = ?\n    `, [id]);\n    return res[0];\n}\n\n// Returns an array of fruit objects via family name\nexport async function getFruitFamily(family) {\n    const [res] = await pool.query(`\n    SELECT *\n    FROM fruits\n    WHERE family = ?\n    `, [family]);\n    return res\n}\n\n// Adds a fruit to the database\nexport async function addFruit(name, family, order, genus, calories, fat, sugar, carbohydrates, protein) {\n    try {\n        const [res] = await pool.query(`\n                    INSERT INTO fruits (name, family, \\`order\\`, genus, calories, fat, sugar, carbohydrates, protein)\n                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n            [name, family, order, genus, calories, fat, sugar, carbohydrates, protein]);\n        return {\n            name,\n            family,\n            order,\n            genus,\n            calories,\n            fat,\n            sugar,\n            carbohydrates,\n            protein\n        };\n    } catch(error) {\n        console.error(\"Error adding fruit:\", error);\n        throw error;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/database.js b/database.js
--- a/database.js	(revision cf61fa19ae5af8ed0a368c8c0ddab3659b163574)
+++ b/database.js	(date 1738336864408)
@@ -7,7 +7,7 @@
     host: process.env.MYSQL_HOST,
     user: process.env.MYSQL_USER,
     password: process.env.MYSQL_PASSWORD,
-    database: process.env.MYSQL_DATABASE
+    database: process.env.MYSQL_DATABASE,
 }).promise();
 
 //Returns an array of fruit objects
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"no-more-reading\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Database on fruits used in this project are located here: https://www.fruityvice.com/\",\n  \"main\": \"main.js\",\n  \"type\": \"module\",\n  \"dependencies\": {\n    \"accepts\": \"^1.3.8\",\n    \"anymatch\": \"^3.1.3\",\n    \"array-flatten\": \"^1.1.1\",\n    \"asynckit\": \"^0.4.0\",\n    \"aws-ssl-profiles\": \"^1.1.2\",\n    \"axios\": \"^1.7.9\",\n    \"balanced-match\": \"^1.0.2\",\n    \"binary-extensions\": \"^2.3.0\",\n    \"body-parser\": \"^1.20.3\",\n    \"brace-expansion\": \"^1.1.11\",\n    \"braces\": \"^3.0.3\",\n    \"bytes\": \"^3.1.2\",\n    \"call-bind-apply-helpers\": \"^1.0.1\",\n    \"call-bound\": \"^1.0.3\",\n    \"chokidar\": \"^3.6.0\",\n    \"combined-stream\": \"^1.0.8\",\n    \"concat-map\": \"^0.0.1\",\n    \"content-disposition\": \"^0.5.4\",\n    \"content-type\": \"^1.0.5\",\n    \"cookie\": \"^0.7.1\",\n    \"cookie-signature\": \"^1.0.6\",\n    \"debug\": \"^2.6.9\",\n    \"delayed-stream\": \"^1.0.0\",\n    \"denque\": \"^2.1.0\",\n    \"depd\": \"^2.0.0\",\n    \"destroy\": \"^1.2.0\",\n    \"dotenv\": \"^16.4.7\",\n    \"dunder-proto\": \"^1.0.1\",\n    \"ee-first\": \"^1.1.1\",\n    \"encodeurl\": \"^2.0.0\",\n    \"es-define-property\": \"^1.0.1\",\n    \"es-errors\": \"^1.3.0\",\n    \"es-object-atoms\": \"^1.1.0\",\n    \"escape-html\": \"^1.0.3\",\n    \"etag\": \"^1.8.1\",\n    \"express\": \"^4.21.2\",\n    \"fill-range\": \"^7.1.1\",\n    \"finalhandler\": \"^1.3.1\",\n    \"follow-redirects\": \"^1.15.9\",\n    \"form-data\": \"^4.0.1\",\n    \"forwarded\": \"^0.2.0\",\n    \"fresh\": \"^0.5.2\",\n    \"fsevents\": \"^2.3.3\",\n    \"function-bind\": \"^1.1.2\",\n    \"generate-function\": \"^2.3.1\",\n    \"get-intrinsic\": \"^1.2.7\",\n    \"get-proto\": \"^1.0.1\",\n    \"glob-parent\": \"^5.1.2\",\n    \"gopd\": \"^1.2.0\",\n    \"has-flag\": \"^3.0.0\",\n    \"has-symbols\": \"^1.1.0\",\n    \"hasown\": \"^2.0.2\",\n    \"http-errors\": \"^2.0.0\",\n    \"iconv-lite\": \"^0.4.24\",\n    \"ignore-by-default\": \"^1.0.1\",\n    \"inherits\": \"^2.0.4\",\n    \"ipaddr.js\": \"^1.9.1\",\n    \"is-binary-path\": \"^2.1.0\",\n    \"is-extglob\": \"^2.1.1\",\n    \"is-glob\": \"^4.0.3\",\n    \"is-number\": \"^7.0.0\",\n    \"is-property\": \"^1.0.2\",\n    \"long\": \"^5.2.4\",\n    \"lru-cache\": \"^7.18.3\",\n    \"lru.min\": \"^1.1.1\",\n    \"math-intrinsics\": \"^1.1.0\",\n    \"media-typer\": \"^0.3.0\",\n    \"merge-descriptors\": \"^1.0.3\",\n    \"methods\": \"^1.1.2\",\n    \"mime\": \"^1.6.0\",\n    \"mime-db\": \"^1.52.0\",\n    \"mime-types\": \"^2.1.35\",\n    \"minimatch\": \"^3.1.2\",\n    \"ms\": \"^2.0.0\",\n    \"mysql2\": \"^3.12.0\",\n    \"named-placeholders\": \"^1.1.3\",\n    \"negotiator\": \"^0.6.3\",\n    \"nodemon\": \"^3.1.9\",\n    \"normalize-path\": \"^3.0.0\",\n    \"object-inspect\": \"^1.13.3\",\n    \"on-finished\": \"^2.4.1\",\n    \"parseurl\": \"^1.3.3\",\n    \"path-to-regexp\": \"^0.1.12\",\n    \"picomatch\": \"^2.3.1\",\n    \"proxy-addr\": \"^2.0.7\",\n    \"proxy-from-env\": \"^1.1.0\",\n    \"pstree.remy\": \"^1.1.8\",\n    \"qs\": \"^6.13.0\",\n    \"range-parser\": \"^1.2.1\",\n    \"raw-body\": \"^2.5.2\",\n    \"readdirp\": \"^3.6.0\",\n    \"safe-buffer\": \"^5.2.1\",\n    \"safer-buffer\": \"^2.1.2\",\n    \"semver\": \"^7.6.3\",\n    \"send\": \"^0.19.0\",\n    \"seq-queue\": \"^0.0.5\",\n    \"serve-static\": \"^1.16.2\",\n    \"setprototypeof\": \"^1.2.0\",\n    \"side-channel\": \"^1.1.0\",\n    \"side-channel-list\": \"^1.0.0\",\n    \"side-channel-map\": \"^1.0.1\",\n    \"side-channel-weakmap\": \"^1.0.2\",\n    \"simple-update-notifier\": \"^2.0.0\",\n    \"statuses\": \"^2.0.1\",\n    \"supports-color\": \"^5.5.0\",\n    \"to-regex-range\": \"^5.0.1\",\n    \"toidentifier\": \"^1.0.1\",\n    \"touch\": \"^3.1.1\",\n    \"type-is\": \"^1.6.18\",\n    \"undefsafe\": \"^2.0.5\",\n    \"unpipe\": \"^1.0.0\",\n    \"utils-merge\": \"^1.0.1\",\n    \"vary\": \"^1.1.2\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/raconrad1/no-more-reading.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/raconrad1/no-more-reading/issues\"\n  },\n  \"homepage\": \"https://github.com/raconrad1/no-more-reading#readme\"\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package.json b/package.json
--- a/package.json	(revision cf61fa19ae5af8ed0a368c8c0ddab3659b163574)
+++ b/package.json	(date 1738259505604)
@@ -1,4 +1,7 @@
 {
+  "engines": {
+    "node": "23.6.1"
+  },
   "name": "no-more-reading",
   "version": "1.0.0",
   "description": "Database on fruits used in this project are located here: https://www.fruityvice.com/",
@@ -47,7 +50,6 @@
     "form-data": "^4.0.1",
     "forwarded": "^0.2.0",
     "fresh": "^0.5.2",
-    "fsevents": "^2.3.3",
     "function-bind": "^1.1.2",
     "generate-function": "^2.3.1",
     "get-intrinsic": "^1.2.7",
@@ -120,7 +122,7 @@
     "vary": "^1.1.2"
   },
   "scripts": {
-    "test": "echo \"Error: no test specified\" && exit 1"
+    "start": "node app.js"
   },
   "repository": {
     "type": "git",
